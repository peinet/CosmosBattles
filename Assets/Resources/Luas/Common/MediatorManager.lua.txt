---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chens.
--- DateTime: 2018/2/1 18:46
---
---@class MediatorManager 中介管理器
MediatorManager = {}
MediatorManager.mediatorListByName = {}
MediatorManager.mediatorListByFunction = {}
function MediatorManager.Init()
    for k, v in pairs(preLoadFile) do
        local a,b,t = string.find(v,".*/(.*)")
        if(t ~= nil and _G[t] ~= nil and _G[t].password_ksjdfuzjd ~= nil and t ~= "MediatorBase" ) then
            if(MediatorManager.mediatorListByName[t] ~= nil) then
                error("preLoadFile存在重复的MediatorName" .. tostring(t))
            else
                MediatorManager.mediatorListByName[t] = _G[t]:New();
            end
        end
    end
end

---如果在Mediator中注册了ID ,则可以调用对应Mediator的onOpenByFunctionID方法
function MediatorManager.openMediatorByFunctionID(funcID , ...)
    if(MediatorManager.mediatorListByFunction[funcID] ~= nil) then
        MediatorManager.mediatorListByFunction[funcID]:onOpenByFunctionID(funcID , unpack(...))
    else
        warn("尝试使用MediatorManager打开一个不存在的功能ID"..tostring(funcID) .. "，使用之前需要先调用mediator的addFunctionID()")
    end
end
---比如LoginPanelMediator 那么viewName就是一个字符串"LoginPanel"
function MediatorManager.openMediatorByName(mediatorName , ...)
    if(MediatorManager.mediatorListByName[mediatorName] ~= nil) then
        MediatorManager.mediatorListByName[mediatorName]:onOpenByMediatorName(mediatorName , unpack(...))
    else
        warn("尝试使用MediatorManager打开一个不存在的MediatorName"..tostring(mediatorName).. "，检查此功能是否继承了MediatorBase()")
    end
end

---如果在Mediator中注册了ID ,则可以调用对应Mediator的onOpenByFunctionID方法
function MediatorManager.closeMediatorByFunctionID(funcID , ...)
    if(MediatorManager.mediatorListByFunction[funcID] ~= nil) then
        MediatorManager.mediatorListByFunction[funcID]:onCloseByFunctionID(funcID , unpack(...))
    else
        warn("尝试使用MediatorManager关闭一个不存在的功能ID"..tostring(funcID) .. "，使用之前需要先调用mediator的addFunctionID()")
    end
end
---比如LoginPanelMediator 那么viewName就是一个字符串"LoginPanel"
function MediatorManager.closeMediatorByName(mediatorName , ...)
    if(MediatorManager.mediatorListByName[mediatorName] ~= nil) then
        MediatorManager.mediatorListByName[mediatorName]:onCloseByMediatorName(mediatorName , unpack(...))
    else
        warn("尝试使用MediatorManager关闭一个不存在的MediatorName"..tostring(mediatorName).. "，检查此功能是否继承了MediatorBase()")
    end
end

function MediatorManager:reset()
end
return MediatorManager