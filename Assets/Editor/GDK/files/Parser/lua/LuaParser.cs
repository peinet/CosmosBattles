//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\workspaceCS\AntlrDLL\AntlrDLL\AntlrDLL\Lua.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrDLL {
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections.Generic;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, NAME=56, NORMALSTRING=57, CHARSTRING=58, 
		LONGSTRING=59, INT=60, HEX=61, FLOAT=62, HEX_FLOAT=63, COMMENT=64, LINE_COMMENT=65, 
		WS=66, SHEBANG=67;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_label = 4, 
		RULE_funcname = 5, RULE_varlist = 6, RULE_namelist = 7, RULE_explist = 8, 
		RULE_exp = 9, RULE_prefixexp = 10, RULE_functioncall = 11, RULE_varOrExp = 12, 
		RULE_var = 13, RULE_varSuffix = 14, RULE_nameAndArgs = 15, RULE_args = 16, 
		RULE_functiondef = 17, RULE_funcbody = 18, RULE_parlist = 19, RULE_tableconstructor = 20, 
		RULE_fieldlist = 21, RULE_field = 22, RULE_fieldsep = 23, RULE_operatorOr = 24, 
		RULE_operatorAnd = 25, RULE_operatorComparison = 26, RULE_operatorStrcat = 27, 
		RULE_operatorAddSub = 28, RULE_operatorMulDivMod = 29, RULE_operatorBitwise = 30, 
		RULE_operatorUnary = 31, RULE_operatorPower = 32, RULE_number = 33, RULE_string = 34;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "retstat", "label", "funcname", "varlist", "namelist", 
		"explist", "exp", "prefixexp", "functioncall", "varOrExp", "var", "varSuffix", 
		"nameAndArgs", "args", "functiondef", "funcbody", "parlist", "tableconstructor", 
		"fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorBitwise", 
		"operatorUnary", "operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'goto'", "'do'", "'end'", "'while'", "'repeat'", 
		"'until'", "'if'", "'then'", "'elseif'", "'else'", "'for'", "','", "'in'", 
		"'function'", "'local'", "'return'", "'::'", "'.'", "':'", "'nil'", "'false'", 
		"'true'", "'...'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'or'", "'and'", 
		"'<'", "'>'", "'<='", "'>='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'//'", "'&'", "'|'", "'~'", "'<<'", "'>>'", "'not'", "'#'", 
		"'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NAME", "NORMALSTRING", 
		"CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", 
		"LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LuaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; block();
			State = 71; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

        private int times;
        [RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_errHandler.Sync(this);
			_la = _input.La(1);
                    times = 0;
            while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__13) | (1L << T__16) | (1L << T__17) | (1L << T__19) | (1L << T__26) | (1L << NAME))) != 0)) {
				{
				{
                                times++;
                                if(times > 10000)
                                {
                                    throw new FailedPredicateException(this, "解析文件出错无尽循环。");//暂时处理方式
                                    break;
                                }
                State = 73; stat();
				}
				}
				State = 78;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__18) {
				{
				State = 79; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; Match(T__0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; varlist();
				State = 84; Match(T__1);
				State = 85; explist();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; functioncall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 88; label();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 89; Match(T__2);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 90; Match(T__3);
				State = 91; Match(NAME);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92; Match(T__4);
				State = 93; block();
				State = 94; Match(T__5);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 96; Match(T__6);
				State = 97; exp(0);
				State = 98; Match(T__4);
				State = 99; block();
				State = 100; Match(T__5);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 102; Match(T__7);
				State = 103; block();
				State = 104; Match(T__8);
				State = 105; exp(0);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 107; Match(T__9);
				State = 108; exp(0);
				State = 109; Match(T__10);
				State = 110; block();
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__11) {
					{
					{
					State = 111; Match(T__11);
					State = 112; exp(0);
					State = 113; Match(T__10);
					State = 114; block();
					}
					}
					State = 120;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 123;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__12) {
					{
					State = 121; Match(T__12);
					State = 122; block();
					}
				}

				State = 125; Match(T__5);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 127; Match(T__13);
				State = 128; Match(NAME);
				State = 129; Match(T__1);
				State = 130; exp(0);
				State = 131; Match(T__14);
				State = 132; exp(0);
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__14) {
					{
					State = 133; Match(T__14);
					State = 134; exp(0);
					}
				}

				State = 137; Match(T__4);
				State = 138; block();
				State = 139; Match(T__5);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 141; Match(T__13);
				State = 142; namelist();
				State = 143; Match(T__15);
				State = 144; explist();
				State = 145; Match(T__4);
				State = 146; block();
				State = 147; Match(T__5);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 149; Match(T__16);
				State = 150; funcname();
				State = 151; funcbody();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 153; Match(T__17);
				State = 154; Match(T__16);
				State = 155; Match(NAME);
				State = 156; funcbody();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 157; Match(T__17);
				State = 158; namelist();
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__1) {
					{
					State = 159; Match(T__1);
					State = 160; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(T__18);
			State = 167;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 166; explist();
				}
			}

			State = 170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 169; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(T__19);
			State = 173; Match(NAME);
			State = 174; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(NAME);
			State = 181;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__20) {
				{
				{
				State = 177; Match(T__20);
				State = 178; Match(NAME);
				}
				}
				State = 183;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 184; Match(T__21);
				State = 185; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; var();
			State = 193;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__14) {
				{
				{
				State = 189; Match(T__14);
				State = 190; var();
				}
				}
				State = 195;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(NAME);
			State = 201;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 197; Match(T__14);
					State = 198; Match(NAME);
					}
					} 
				}
				State = 203;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; exp(0);
			State = 209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__14) {
				{
				{
				State = 205; Match(T__14);
				State = 206; exp(0);
				}
				}
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__22:
				{
				State = 213; Match(T__22);
				}
				break;
			case T__23:
				{
				State = 214; Match(T__23);
				}
				break;
			case T__24:
				{
				State = 215; Match(T__24);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 216; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 217; @string();
				}
				break;
			case T__25:
				{
				State = 218; Match(T__25);
				}
				break;
			case T__16:
				{
				State = 219; functiondef();
				}
				break;
			case T__26:
			case NAME:
				{
				State = 220; prefixexp();
				}
				break;
			case T__30:
				{
				State = 221; tableconstructor();
				}
				break;
			case T__42:
			case T__49:
			case T__52:
			case T__53:
				{
				State = 222; operatorUnary();
				State = 223; exp(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 261;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 259;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 227;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 228; operatorPower();
						State = 229; exp(9);
						}
						break;

					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 231;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 232; operatorMulDivMod();
						State = 233; exp(8);
						}
						break;

					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 235;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 236; operatorAddSub();
						State = 237; exp(7);
						}
						break;

					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 239;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 240; operatorStrcat();
						State = 241; exp(5);
						}
						break;

					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 243;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 244; operatorComparison();
						State = 245; exp(5);
						}
						break;

					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 247;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 248; operatorAnd();
						State = 249; exp(4);
						}
						break;

					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 251;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 252; operatorOr();
						State = 253; exp(3);
						}
						break;

					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 255;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 256; operatorBitwise();
						State = 257; exp(2);
						}
						break;
					}
					} 
				}
				State = 263;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; varOrExp();
			State = 268;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 265; nameAndArgs();
					}
					} 
				}
				State = 270;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; varOrExp();
			State = 273;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 272; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 275;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_varOrExp);
		try {
			State = 282;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278; Match(T__26);
				State = 279; exp(0);
				State = 280; Match(T__27);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				{
				State = 284; Match(NAME);
				}
				break;
			case T__26:
				{
				State = 285; Match(T__26);
				State = 286; exp(0);
				State = 287; Match(T__27);
				State = 288; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 295;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 292; varSuffix();
					}
					} 
				}
				State = 297;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__26) | (1L << T__30) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 298; nameAndArgs();
				}
				}
				State = 303;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 310;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__28:
				{
				State = 304; Match(T__28);
				State = 305; exp(0);
				State = 306; Match(T__29);
				}
				break;
			case T__20:
				{
				State = 308; Match(T__20);
				State = 309; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 312; Match(T__21);
				State = 313; Match(NAME);
				}
			}

			State = 316; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_args);
		int _la;
		try {
			State = 325;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; Match(T__26);
				State = 320;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 319; explist();
					}
				}

				State = 322; Match(T__27);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 324; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(T__16);
			State = 328; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(T__26);
			State = 332;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__25 || _la==NAME) {
				{
				State = 331; parlist();
				}
			}

			State = 334; Match(T__27);
			State = 335; block();
			State = 336; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parlist);
		int _la;
		try {
			State = 344;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; namelist();
				State = 341;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__14) {
					{
					State = 339; Match(T__14);
					State = 340; Match(T__25);
					}
				}

				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(T__30);
			State = 348;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 347; fieldlist();
				}
			}

			State = 350; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; field();
			State = 358;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 353; fieldsep();
					State = 354; field();
					}
					} 
				}
				State = 360;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			State = 362;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0 || _la==T__14) {
				{
				State = 361; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_field);
		try {
			State = 374;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; Match(T__28);
				State = 365; exp(0);
				State = 366; Match(T__29);
				State = 367; Match(T__1);
				State = 368; exp(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370; Match(NAME);
				State = 371; Match(T__1);
				State = 372; exp(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 373; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_la = _input.La(1);
			if ( !(_la==T__0 || _la==T__14) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_la = _input.La(1);
			if ( !(_la==T__41 || _la==T__42) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(T__54);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(LuaParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 9);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);

		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x45\x193\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\x3\x2\x3\x3\a\x3M\n\x3\f\x3\xE"+
		"\x3P\v\x3\x3\x3\x5\x3S\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\a\x4w\n\x4\f\x4\xE\x4z\v\x4\x3\x4\x3\x4\x5\x4"+
		"~\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5"+
		"\x4\x8A\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\xA4\n\x4\x5\x4\xA6\n\x4\x3\x5\x3\x5\x5\x5\xAA"+
		"\n\x5\x3\x5\x5\x5\xAD\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a"+
		"\xB6\n\a\f\a\xE\a\xB9\v\a\x3\a\x3\a\x5\a\xBD\n\a\x3\b\x3\b\x3\b\a\b\xC2"+
		"\n\b\f\b\xE\b\xC5\v\b\x3\t\x3\t\x3\t\a\t\xCA\n\t\f\t\xE\t\xCD\v\t\x3\n"+
		"\x3\n\x3\n\a\n\xD2\n\n\f\n\xE\n\xD5\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xE4\n\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a"+
		"\v\x106\n\v\f\v\xE\v\x109\v\v\x3\f\x3\f\a\f\x10D\n\f\f\f\xE\f\x110\v\f"+
		"\x3\r\x3\r\x6\r\x114\n\r\r\r\xE\r\x115\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\x11D\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x125\n\xF\x3\xF"+
		"\a\xF\x128\n\xF\f\xF\xE\xF\x12B\v\xF\x3\x10\a\x10\x12E\n\x10\f\x10\xE"+
		"\x10\x131\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x139"+
		"\n\x10\x3\x11\x3\x11\x5\x11\x13D\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x5"+
		"\x12\x143\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x148\n\x12\x3\x13\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x5\x14\x14F\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x3\x15\x5\x15\x158\n\x15\x3\x15\x5\x15\x15B\n\x15\x3\x16\x3\x16"+
		"\x5\x16\x15F\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x167"+
		"\n\x17\f\x17\xE\x17\x16A\v\x17\x3\x17\x5\x17\x16D\n\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x179\n"+
		"\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3"+
		"$\x3$\x3$\x2\x2\x3\x14%\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2"+
		"\x44\x2\x46\x2\x2\n\x4\x2\x3\x3\x11\x11\x3\x2%*\x3\x2,-\x3\x2.\x31\x3"+
		"\x2\x32\x36\x5\x2--\x34\x34\x37\x38\x3\x2>\x41\x3\x2;=\x1AE\x2H\x3\x2"+
		"\x2\x2\x4N\x3\x2\x2\x2\x6\xA5\x3\x2\x2\x2\b\xA7\x3\x2\x2\x2\n\xAE\x3\x2"+
		"\x2\x2\f\xB2\x3\x2\x2\x2\xE\xBE\x3\x2\x2\x2\x10\xC6\x3\x2\x2\x2\x12\xCE"+
		"\x3\x2\x2\x2\x14\xE3\x3\x2\x2\x2\x16\x10A\x3\x2\x2\x2\x18\x111\x3\x2\x2"+
		"\x2\x1A\x11C\x3\x2\x2\x2\x1C\x124\x3\x2\x2\x2\x1E\x12F\x3\x2\x2\x2 \x13C"+
		"\x3\x2\x2\x2\"\x147\x3\x2\x2\x2$\x149\x3\x2\x2\x2&\x14C\x3\x2\x2\x2(\x15A"+
		"\x3\x2\x2\x2*\x15C\x3\x2\x2\x2,\x162\x3\x2\x2\x2.\x178\x3\x2\x2\x2\x30"+
		"\x17A\x3\x2\x2\x2\x32\x17C\x3\x2\x2\x2\x34\x17E\x3\x2\x2\x2\x36\x180\x3"+
		"\x2\x2\x2\x38\x182\x3\x2\x2\x2:\x184\x3\x2\x2\x2<\x186\x3\x2\x2\x2>\x188"+
		"\x3\x2\x2\x2@\x18A\x3\x2\x2\x2\x42\x18C\x3\x2\x2\x2\x44\x18E\x3\x2\x2"+
		"\x2\x46\x190\x3\x2\x2\x2HI\x5\x4\x3\x2IJ\a\x2\x2\x3J\x3\x3\x2\x2\x2KM"+
		"\x5\x6\x4\x2LK\x3\x2\x2\x2MP\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2O"+
		"R\x3\x2\x2\x2PN\x3\x2\x2\x2QS\x5\b\x5\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2S"+
		"\x5\x3\x2\x2\x2T\xA6\a\x3\x2\x2UV\x5\xE\b\x2VW\a\x4\x2\x2WX\x5\x12\n\x2"+
		"X\xA6\x3\x2\x2\x2Y\xA6\x5\x18\r\x2Z\xA6\x5\n\x6\x2[\xA6\a\x5\x2\x2\\]"+
		"\a\x6\x2\x2]\xA6\a:\x2\x2^_\a\a\x2\x2_`\x5\x4\x3\x2`\x61\a\b\x2\x2\x61"+
		"\xA6\x3\x2\x2\x2\x62\x63\a\t\x2\x2\x63\x64\x5\x14\v\x2\x64\x65\a\a\x2"+
		"\x2\x65\x66\x5\x4\x3\x2\x66g\a\b\x2\x2g\xA6\x3\x2\x2\x2hi\a\n\x2\x2ij"+
		"\x5\x4\x3\x2jk\a\v\x2\x2kl\x5\x14\v\x2l\xA6\x3\x2\x2\x2mn\a\f\x2\x2no"+
		"\x5\x14\v\x2op\a\r\x2\x2px\x5\x4\x3\x2qr\a\xE\x2\x2rs\x5\x14\v\x2st\a"+
		"\r\x2\x2tu\x5\x4\x3\x2uw\x3\x2\x2\x2vq\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3"+
		"\x2\x2\x2xy\x3\x2\x2\x2y}\x3\x2\x2\x2zx\x3\x2\x2\x2{|\a\xF\x2\x2|~\x5"+
		"\x4\x3\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\a\b\x2"+
		"\x2\x80\xA6\x3\x2\x2\x2\x81\x82\a\x10\x2\x2\x82\x83\a:\x2\x2\x83\x84\a"+
		"\x4\x2\x2\x84\x85\x5\x14\v\x2\x85\x86\a\x11\x2\x2\x86\x89\x5\x14\v\x2"+
		"\x87\x88\a\x11\x2\x2\x88\x8A\x5\x14\v\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3"+
		"\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\a\a\x2\x2\x8C\x8D\x5\x4\x3\x2\x8D"+
		"\x8E\a\b\x2\x2\x8E\xA6\x3\x2\x2\x2\x8F\x90\a\x10\x2\x2\x90\x91\x5\x10"+
		"\t\x2\x91\x92\a\x12\x2\x2\x92\x93\x5\x12\n\x2\x93\x94\a\a\x2\x2\x94\x95"+
		"\x5\x4\x3\x2\x95\x96\a\b\x2\x2\x96\xA6\x3\x2\x2\x2\x97\x98\a\x13\x2\x2"+
		"\x98\x99\x5\f\a\x2\x99\x9A\x5&\x14\x2\x9A\xA6\x3\x2\x2\x2\x9B\x9C\a\x14"+
		"\x2\x2\x9C\x9D\a\x13\x2\x2\x9D\x9E\a:\x2\x2\x9E\xA6\x5&\x14\x2\x9F\xA0"+
		"\a\x14\x2\x2\xA0\xA3\x5\x10\t\x2\xA1\xA2\a\x4\x2\x2\xA2\xA4\x5\x12\n\x2"+
		"\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5T\x3\x2"+
		"\x2\x2\xA5U\x3\x2\x2\x2\xA5Y\x3\x2\x2\x2\xA5Z\x3\x2\x2\x2\xA5[\x3\x2\x2"+
		"\x2\xA5\\\x3\x2\x2\x2\xA5^\x3\x2\x2\x2\xA5\x62\x3\x2\x2\x2\xA5h\x3\x2"+
		"\x2\x2\xA5m\x3\x2\x2\x2\xA5\x81\x3\x2\x2\x2\xA5\x8F\x3\x2\x2\x2\xA5\x97"+
		"\x3\x2\x2\x2\xA5\x9B\x3\x2\x2\x2\xA5\x9F\x3\x2\x2\x2\xA6\a\x3\x2\x2\x2"+
		"\xA7\xA9\a\x15\x2\x2\xA8\xAA\x5\x12\n\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3"+
		"\x2\x2\x2\xAA\xAC\x3\x2\x2\x2\xAB\xAD\a\x3\x2\x2\xAC\xAB\x3\x2\x2\x2\xAC"+
		"\xAD\x3\x2\x2\x2\xAD\t\x3\x2\x2\x2\xAE\xAF\a\x16\x2\x2\xAF\xB0\a:\x2\x2"+
		"\xB0\xB1\a\x16\x2\x2\xB1\v\x3\x2\x2\x2\xB2\xB7\a:\x2\x2\xB3\xB4\a\x17"+
		"\x2\x2\xB4\xB6\a:\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6\xB9\x3\x2\x2\x2\xB7\xB5"+
		"\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBC\x3\x2\x2\x2\xB9\xB7\x3\x2\x2"+
		"\x2\xBA\xBB\a\x18\x2\x2\xBB\xBD\a:\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3"+
		"\x2\x2\x2\xBD\r\x3\x2\x2\x2\xBE\xC3\x5\x1C\xF\x2\xBF\xC0\a\x11\x2\x2\xC0"+
		"\xC2\x5\x1C\xF\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC5\x3\x2\x2\x2\xC3\xC1\x3\x2"+
		"\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xF\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC6"+
		"\xCB\a:\x2\x2\xC7\xC8\a\x11\x2\x2\xC8\xCA\a:\x2\x2\xC9\xC7\x3\x2\x2\x2"+
		"\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\x11\x3"+
		"\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCE\xD3\x5\x14\v\x2\xCF\xD0\a\x11\x2\x2"+
		"\xD0\xD2\x5\x14\v\x2\xD1\xCF\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3"+
		"\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\x13\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2"+
		"\xD6\xD7\b\v\x1\x2\xD7\xE4\a\x19\x2\x2\xD8\xE4\a\x1A\x2\x2\xD9\xE4\a\x1B"+
		"\x2\x2\xDA\xE4\x5\x44#\x2\xDB\xE4\x5\x46$\x2\xDC\xE4\a\x1C\x2\x2\xDD\xE4"+
		"\x5$\x13\x2\xDE\xE4\x5\x16\f\x2\xDF\xE4\x5*\x16\x2\xE0\xE1\x5@!\x2\xE1"+
		"\xE2\x5\x14\v\n\xE2\xE4\x3\x2\x2\x2\xE3\xD6\x3\x2\x2\x2\xE3\xD8\x3\x2"+
		"\x2\x2\xE3\xD9\x3\x2\x2\x2\xE3\xDA\x3\x2\x2\x2\xE3\xDB\x3\x2\x2\x2\xE3"+
		"\xDC\x3\x2\x2\x2\xE3\xDD\x3\x2\x2\x2\xE3\xDE\x3\x2\x2\x2\xE3\xDF\x3\x2"+
		"\x2\x2\xE3\xE0\x3\x2\x2\x2\xE4\x107\x3\x2\x2\x2\xE5\xE6\f\v\x2\x2\xE6"+
		"\xE7\x5\x42\"\x2\xE7\xE8\x5\x14\v\v\xE8\x106\x3\x2\x2\x2\xE9\xEA\f\t\x2"+
		"\x2\xEA\xEB\x5<\x1F\x2\xEB\xEC\x5\x14\v\n\xEC\x106\x3\x2\x2\x2\xED\xEE"+
		"\f\b\x2\x2\xEE\xEF\x5:\x1E\x2\xEF\xF0\x5\x14\v\t\xF0\x106\x3\x2\x2\x2"+
		"\xF1\xF2\f\a\x2\x2\xF2\xF3\x5\x38\x1D\x2\xF3\xF4\x5\x14\v\a\xF4\x106\x3"+
		"\x2\x2\x2\xF5\xF6\f\x6\x2\x2\xF6\xF7\x5\x36\x1C\x2\xF7\xF8\x5\x14\v\a"+
		"\xF8\x106\x3\x2\x2\x2\xF9\xFA\f\x5\x2\x2\xFA\xFB\x5\x34\x1B\x2\xFB\xFC"+
		"\x5\x14\v\x6\xFC\x106\x3\x2\x2\x2\xFD\xFE\f\x4\x2\x2\xFE\xFF\x5\x32\x1A"+
		"\x2\xFF\x100\x5\x14\v\x5\x100\x106\x3\x2\x2\x2\x101\x102\f\x3\x2\x2\x102"+
		"\x103\x5> \x2\x103\x104\x5\x14\v\x4\x104\x106\x3\x2\x2\x2\x105\xE5\x3"+
		"\x2\x2\x2\x105\xE9\x3\x2\x2\x2\x105\xED\x3\x2\x2\x2\x105\xF1\x3\x2\x2"+
		"\x2\x105\xF5\x3\x2\x2\x2\x105\xF9\x3\x2\x2\x2\x105\xFD\x3\x2\x2\x2\x105"+
		"\x101\x3\x2\x2\x2\x106\x109\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x108"+
		"\x3\x2\x2\x2\x108\x15\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A\x10E\x5\x1A"+
		"\xE\x2\x10B\x10D\x5 \x11\x2\x10C\x10B\x3\x2\x2\x2\x10D\x110\x3\x2\x2\x2"+
		"\x10E\x10C\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x17\x3\x2\x2\x2\x110"+
		"\x10E\x3\x2\x2\x2\x111\x113\x5\x1A\xE\x2\x112\x114\x5 \x11\x2\x113\x112"+
		"\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x115\x116\x3"+
		"\x2\x2\x2\x116\x19\x3\x2\x2\x2\x117\x11D\x5\x1C\xF\x2\x118\x119\a\x1D"+
		"\x2\x2\x119\x11A\x5\x14\v\x2\x11A\x11B\a\x1E\x2\x2\x11B\x11D\x3\x2\x2"+
		"\x2\x11C\x117\x3\x2\x2\x2\x11C\x118\x3\x2\x2\x2\x11D\x1B\x3\x2\x2\x2\x11E"+
		"\x125\a:\x2\x2\x11F\x120\a\x1D\x2\x2\x120\x121\x5\x14\v\x2\x121\x122\a"+
		"\x1E\x2\x2\x122\x123\x5\x1E\x10\x2\x123\x125\x3\x2\x2\x2\x124\x11E\x3"+
		"\x2\x2\x2\x124\x11F\x3\x2\x2\x2\x125\x129\x3\x2\x2\x2\x126\x128\x5\x1E"+
		"\x10\x2\x127\x126\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2\x129\x127\x3\x2\x2"+
		"\x2\x129\x12A\x3\x2\x2\x2\x12A\x1D\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12C"+
		"\x12E\x5 \x11\x2\x12D\x12C\x3\x2\x2\x2\x12E\x131\x3\x2\x2\x2\x12F\x12D"+
		"\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x138\x3\x2\x2\x2\x131\x12F\x3"+
		"\x2\x2\x2\x132\x133\a\x1F\x2\x2\x133\x134\x5\x14\v\x2\x134\x135\a \x2"+
		"\x2\x135\x139\x3\x2\x2\x2\x136\x137\a\x17\x2\x2\x137\x139\a:\x2\x2\x138"+
		"\x132\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x139\x1F\x3\x2\x2\x2\x13A\x13B"+
		"\a\x18\x2\x2\x13B\x13D\a:\x2\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2"+
		"\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x5\"\x12\x2\x13F!\x3\x2\x2\x2\x140"+
		"\x142\a\x1D\x2\x2\x141\x143\x5\x12\n\x2\x142\x141\x3\x2\x2\x2\x142\x143"+
		"\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x148\a\x1E\x2\x2\x145\x148\x5"+
		"*\x16\x2\x146\x148\x5\x46$\x2\x147\x140\x3\x2\x2\x2\x147\x145\x3\x2\x2"+
		"\x2\x147\x146\x3\x2\x2\x2\x148#\x3\x2\x2\x2\x149\x14A\a\x13\x2\x2\x14A"+
		"\x14B\x5&\x14\x2\x14B%\x3\x2\x2\x2\x14C\x14E\a\x1D\x2\x2\x14D\x14F\x5"+
		"(\x15\x2\x14E\x14D\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\x3\x2\x2"+
		"\x2\x150\x151\a\x1E\x2\x2\x151\x152\x5\x4\x3\x2\x152\x153\a\b\x2\x2\x153"+
		"\'\x3\x2\x2\x2\x154\x157\x5\x10\t\x2\x155\x156\a\x11\x2\x2\x156\x158\a"+
		"\x1C\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x15B\x3\x2"+
		"\x2\x2\x159\x15B\a\x1C\x2\x2\x15A\x154\x3\x2\x2\x2\x15A\x159\x3\x2\x2"+
		"\x2\x15B)\x3\x2\x2\x2\x15C\x15E\a!\x2\x2\x15D\x15F\x5,\x17\x2\x15E\x15D"+
		"\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\a\""+
		"\x2\x2\x161+\x3\x2\x2\x2\x162\x168\x5.\x18\x2\x163\x164\x5\x30\x19\x2"+
		"\x164\x165\x5.\x18\x2\x165\x167\x3\x2\x2\x2\x166\x163\x3\x2\x2\x2\x167"+
		"\x16A\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16C"+
		"\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16B\x16D\x5\x30\x19\x2\x16C\x16B\x3"+
		"\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D-\x3\x2\x2\x2\x16E\x16F\a\x1F\x2\x2"+
		"\x16F\x170\x5\x14\v\x2\x170\x171\a \x2\x2\x171\x172\a\x4\x2\x2\x172\x173"+
		"\x5\x14\v\x2\x173\x179\x3\x2\x2\x2\x174\x175\a:\x2\x2\x175\x176\a\x4\x2"+
		"\x2\x176\x179\x5\x14\v\x2\x177\x179\x5\x14\v\x2\x178\x16E\x3\x2\x2\x2"+
		"\x178\x174\x3\x2\x2\x2\x178\x177\x3\x2\x2\x2\x179/\x3\x2\x2\x2\x17A\x17B"+
		"\t\x2\x2\x2\x17B\x31\x3\x2\x2\x2\x17C\x17D\a#\x2\x2\x17D\x33\x3\x2\x2"+
		"\x2\x17E\x17F\a$\x2\x2\x17F\x35\x3\x2\x2\x2\x180\x181\t\x3\x2\x2\x181"+
		"\x37\x3\x2\x2\x2\x182\x183\a+\x2\x2\x183\x39\x3\x2\x2\x2\x184\x185\t\x4"+
		"\x2\x2\x185;\x3\x2\x2\x2\x186\x187\t\x5\x2\x2\x187=\x3\x2\x2\x2\x188\x189"+
		"\t\x6\x2\x2\x189?\x3\x2\x2\x2\x18A\x18B\t\a\x2\x2\x18B\x41\x3\x2\x2\x2"+
		"\x18C\x18D\a\x39\x2\x2\x18D\x43\x3\x2\x2\x2\x18E\x18F\t\b\x2\x2\x18F\x45"+
		"\x3\x2\x2\x2\x190\x191\t\t\x2\x2\x191G\x3\x2\x2\x2$NRx}\x89\xA3\xA5\xA9"+
		"\xAC\xB7\xBC\xC3\xCB\xD3\xE3\x105\x107\x10E\x115\x11C\x124\x129\x12F\x138"+
		"\x13C\x142\x147\x14E\x157\x15A\x15E\x168\x16C\x178";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrDLL
