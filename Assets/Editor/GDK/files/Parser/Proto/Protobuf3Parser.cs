//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\workspaceCS\AntlrDLL\AntlrDLL\AntlrDLL\Protobuf3.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrDLL {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Protobuf3Parser : Parser {
	public const int
		BOOL=1, BYTES=2, DOUBLE=3, ENUM=4, FIXED32=5, FIXED64=6, FLOAT=7, IMPORT=8, 
		INT32=9, INT64=10, MAP=11, MESSAGE=12, ONEOF=13, OPTION=14, PACKAGE=15, 
		PROTO3_DOUBLE=16, PROTO3_SINGLE=17, PUBLIC=18, REPEATED=19, RESERVED=20, 
		RETURNS=21, RPC=22, SERVICE=23, SFIXED32=24, SFIXED64=25, SINT32=26, SINT64=27, 
		STREAM=28, STRING=29, SYNTAX=30, TO=31, UINT32=32, UINT64=33, WEAK=34, 
		Ident=35, IntLit=36, FloatLit=37, BoolLit=38, StrLit=39, Quote=40, LPAREN=41, 
		RPAREN=42, LBRACE=43, RBRACE=44, LBRACK=45, RBRACK=46, LCHEVR=47, RCHEVR=48, 
		SEMI=49, COMMA=50, DOT=51, MINUS=52, PLUS=53, ASSIGN=54, WS=55, COMMENT=56, 
		LINE_COMMENT=57;
	public const int
		RULE_proto = 0, RULE_syntax = 1, RULE_importStatement = 2, RULE_packageStatement = 3, 
		RULE_option = 4, RULE_optionName = 5, RULE_topLevelDef = 6, RULE_message = 7, 
		RULE_messageBody = 8, RULE_enumDefinition = 9, RULE_enumBody = 10, RULE_enumField = 11, 
		RULE_enumValueOption = 12, RULE_service = 13, RULE_rpc = 14, RULE_reserved = 15, 
		RULE_ranges = 16, RULE_range = 17, RULE_fieldNames = 18, RULE_type = 19, 
		RULE_fieldNumber = 20, RULE_field = 21, RULE_fieldOptions = 22, RULE_fieldOption = 23, 
		RULE_oneof = 24, RULE_oneofField = 25, RULE_mapField = 26, RULE_keyType = 27, 
		RULE_fullIdent = 28, RULE_messageName = 29, RULE_enumName = 30, RULE_messageOrEnumName = 31, 
		RULE_fieldName = 32, RULE_oneofName = 33, RULE_mapName = 34, RULE_serviceName = 35, 
		RULE_rpcName = 36, RULE_messageType = 37, RULE_messageOrEnumType = 38, 
		RULE_emptyStatement = 39, RULE_constant = 40;
	public static readonly string[] ruleNames = {
		"proto", "syntax", "importStatement", "packageStatement", "option", "optionName", 
		"topLevelDef", "message", "messageBody", "enumDefinition", "enumBody", 
		"enumField", "enumValueOption", "service", "rpc", "reserved", "ranges", 
		"range", "fieldNames", "type", "fieldNumber", "field", "fieldOptions", 
		"fieldOption", "oneof", "oneofField", "mapField", "keyType", "fullIdent", 
		"messageName", "enumName", "messageOrEnumName", "fieldName", "oneofName", 
		"mapName", "serviceName", "rpcName", "messageType", "messageOrEnumType", 
		"emptyStatement", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'bool'", "'bytes'", "'double'", "'enum'", "'fixed32'", "'fixed64'", 
		"'float'", "'import'", "'int32'", "'int64'", "'map'", "'message'", "'oneof'", 
		"'option'", "'package'", "'\"proto3\"'", "''proto3''", "'public'", "'repeated'", 
		"'reserved'", "'returns'", "'rpc'", "'service'", "'sfixed32'", "'sfixed64'", 
		"'sint32'", "'sint64'", "'stream'", "'string'", "'syntax'", "'to'", "'uint32'", 
		"'uint64'", "'weak'", null, null, null, null, null, null, "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "'<'", "'>'", "';'", "','", "'.'", "'-'", 
		"'+'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOL", "BYTES", "DOUBLE", "ENUM", "FIXED32", "FIXED64", "FLOAT", 
		"IMPORT", "INT32", "INT64", "MAP", "MESSAGE", "ONEOF", "OPTION", "PACKAGE", 
		"PROTO3_DOUBLE", "PROTO3_SINGLE", "PUBLIC", "REPEATED", "RESERVED", "RETURNS", 
		"RPC", "SERVICE", "SFIXED32", "SFIXED64", "SINT32", "SINT64", "STREAM", 
		"STRING", "SYNTAX", "TO", "UINT32", "UINT64", "WEAK", "Ident", "IntLit", 
		"FloatLit", "BoolLit", "StrLit", "Quote", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "LBRACK", "RBRACK", "LCHEVR", "RCHEVR", "SEMI", "COMMA", "DOT", 
		"MINUS", "PLUS", "ASSIGN", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Protobuf3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Protobuf3Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProtoContext : ParserRuleContext {
		public SyntaxContext syntax() {
			return GetRuleContext<SyntaxContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(Protobuf3Parser.Eof, 0); }
		public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public PackageStatementContext[] packageStatement() {
			return GetRuleContexts<PackageStatementContext>();
		}
		public PackageStatementContext packageStatement(int i) {
			return GetRuleContext<PackageStatementContext>(i);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public TopLevelDefContext[] topLevelDef() {
			return GetRuleContexts<TopLevelDefContext>();
		}
		public TopLevelDefContext topLevelDef(int i) {
			return GetRuleContext<TopLevelDefContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public ProtoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterProto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitProto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtoContext proto() {
		ProtoContext _localctx = new ProtoContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_proto);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; syntax();
			State = 90;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENUM) | (1L << IMPORT) | (1L << MESSAGE) | (1L << OPTION) | (1L << PACKAGE) | (1L << SERVICE) | (1L << SEMI))) != 0)) {
				{
				State = 88;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case IMPORT:
					{
					State = 83; importStatement();
					}
					break;
				case PACKAGE:
					{
					State = 84; packageStatement();
					}
					break;
				case OPTION:
					{
					State = 85; option();
					}
					break;
				case ENUM:
				case MESSAGE:
				case SERVICE:
					{
					State = 86; topLevelDef();
					}
					break;
				case SEMI:
					{
					State = 87; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 92;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 93; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxContext : ParserRuleContext {
		public SyntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterSyntax(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitSyntax(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyntax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxContext syntax() {
		SyntaxContext _localctx = new SyntaxContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_syntax);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(SYNTAX);
			State = 96; Match(ASSIGN);
			State = 97;
			_la = _input.La(1);
			if ( !(_la==PROTO3_DOUBLE || _la==PROTO3_SINGLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 98; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode StrLit() { return GetToken(Protobuf3Parser.StrLit, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(IMPORT);
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==WEAK) {
				{
				State = 101;
				_la = _input.La(1);
				if ( !(_la==PUBLIC || _la==WEAK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 104; Match(StrLit);
			State = 105; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageStatementContext : ParserRuleContext {
		public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		public PackageStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterPackageStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitPackageStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageStatementContext packageStatement() {
		PackageStatementContext _localctx = new PackageStatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_packageStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(PACKAGE);
			State = 108; fullIdent();
			State = 109; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(OPTION);
			State = 112; optionName();
			State = 113; Match(ASSIGN);
			State = 114; constant();
			State = 115; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionNameContext : ParserRuleContext {
		public ITerminalNode[] Ident() { return GetTokens(Protobuf3Parser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(Protobuf3Parser.Ident, i);
		}
		public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		public OptionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOptionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOptionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionNameContext optionName() {
		OptionNameContext _localctx = new OptionNameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_optionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Ident:
				{
				State = 117; Match(Ident);
				}
				break;
			case LPAREN:
				{
				State = 118; Match(LPAREN);
				State = 119; fullIdent();
				State = 120; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 124; Match(DOT);
				State = 125; Match(Ident);
				}
				}
				State = 130;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDefContext : ParserRuleContext {
		public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public ServiceContext service() {
			return GetRuleContext<ServiceContext>(0);
		}
		public TopLevelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterTopLevelDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitTopLevelDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDefContext topLevelDef() {
		TopLevelDefContext _localctx = new TopLevelDefContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_topLevelDef);
		try {
			State = 134;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MESSAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; message();
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; enumDefinition();
				}
				break;
			case SERVICE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; service();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : ParserRuleContext {
		public MessageNameContext messageName() {
			return GetRuleContext<MessageNameContext>(0);
		}
		public MessageBodyContext messageBody() {
			return GetRuleContext<MessageBodyContext>(0);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(MESSAGE);
			State = 137; messageName();
			State = 138; messageBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageBodyContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EnumDefinitionContext[] enumDefinition() {
			return GetRuleContexts<EnumDefinitionContext>();
		}
		public EnumDefinitionContext enumDefinition(int i) {
			return GetRuleContext<EnumDefinitionContext>(i);
		}
		public MessageContext[] message() {
			return GetRuleContexts<MessageContext>();
		}
		public MessageContext message(int i) {
			return GetRuleContext<MessageContext>(i);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OneofContext[] oneof() {
			return GetRuleContexts<OneofContext>();
		}
		public OneofContext oneof(int i) {
			return GetRuleContext<OneofContext>(i);
		}
		public MapFieldContext[] mapField() {
			return GetRuleContexts<MapFieldContext>();
		}
		public MapFieldContext mapField(int i) {
			return GetRuleContext<MapFieldContext>(i);
		}
		public ReservedContext[] reserved() {
			return GetRuleContexts<ReservedContext>();
		}
		public ReservedContext reserved(int i) {
			return GetRuleContext<ReservedContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public MessageBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageBodyContext messageBody() {
		MessageBodyContext _localctx = new MessageBodyContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_messageBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(LBRACE);
			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTES) | (1L << DOUBLE) | (1L << ENUM) | (1L << FIXED32) | (1L << FIXED64) | (1L << FLOAT) | (1L << INT32) | (1L << INT64) | (1L << MAP) | (1L << MESSAGE) | (1L << ONEOF) | (1L << OPTION) | (1L << REPEATED) | (1L << RESERVED) | (1L << SFIXED32) | (1L << SFIXED64) | (1L << SINT32) | (1L << SINT64) | (1L << STRING) | (1L << UINT32) | (1L << UINT64) | (1L << Ident) | (1L << SEMI) | (1L << DOT))) != 0)) {
				{
				State = 149;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BOOL:
				case BYTES:
				case DOUBLE:
				case FIXED32:
				case FIXED64:
				case FLOAT:
				case INT32:
				case INT64:
				case REPEATED:
				case SFIXED32:
				case SFIXED64:
				case SINT32:
				case SINT64:
				case STRING:
				case UINT32:
				case UINT64:
				case Ident:
				case DOT:
					{
					State = 141; field();
					}
					break;
				case ENUM:
					{
					State = 142; enumDefinition();
					}
					break;
				case MESSAGE:
					{
					State = 143; message();
					}
					break;
				case OPTION:
					{
					State = 144; option();
					}
					break;
				case ONEOF:
					{
					State = 145; oneof();
					}
					break;
				case MAP:
					{
					State = 146; mapField();
					}
					break;
				case RESERVED:
					{
					State = 147; reserved();
					}
					break;
				case SEMI:
					{
					State = 148; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 154; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(ENUM);
			State = 157; enumName();
			State = 158; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(LBRACE);
			State = 166;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTION) | (1L << Ident) | (1L << SEMI))) != 0)) {
				{
				State = 164;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OPTION:
					{
					State = 161; option();
					}
					break;
				case Ident:
					{
					State = 162; enumField();
					}
					break;
				case SEMI:
					{
					State = 163; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 168;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 169; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public EnumValueOptionContext[] enumValueOption() {
			return GetRuleContexts<EnumValueOptionContext>();
		}
		public EnumValueOptionContext enumValueOption(int i) {
			return GetRuleContext<EnumValueOptionContext>(i);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(Ident);
			State = 172; Match(ASSIGN);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MINUS) {
				{
				State = 173; Match(MINUS);
				}
			}

			State = 176; Match(IntLit);
			State = 188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACK) {
				{
				State = 177; Match(LBRACK);
				State = 178; enumValueOption();
				State = 183;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 179; Match(COMMA);
					State = 180; enumValueOption();
					}
					}
					State = 185;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 186; Match(RBRACK);
				}
			}

			State = 190; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueOptionContext : ParserRuleContext {
		public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public EnumValueOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumValueOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumValueOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueOptionContext enumValueOption() {
		EnumValueOptionContext _localctx = new EnumValueOptionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_enumValueOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; optionName();
			State = 193; Match(ASSIGN);
			State = 194; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceContext : ParserRuleContext {
		public ServiceNameContext serviceName() {
			return GetRuleContext<ServiceNameContext>(0);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public RpcContext[] rpc() {
			return GetRuleContexts<RpcContext>();
		}
		public RpcContext rpc(int i) {
			return GetRuleContext<RpcContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public ServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceContext service() {
		ServiceContext _localctx = new ServiceContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_service);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(SERVICE);
			State = 197; serviceName();
			State = 198; Match(LBRACE);
			State = 204;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTION) | (1L << RPC) | (1L << SEMI))) != 0)) {
				{
				State = 202;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OPTION:
					{
					State = 199; option();
					}
					break;
				case RPC:
					{
					State = 200; rpc();
					}
					break;
				case SEMI:
					{
					State = 201; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 207; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcContext : ParserRuleContext {
		public RpcNameContext rpcName() {
			return GetRuleContext<RpcNameContext>(0);
		}
		public MessageTypeContext[] messageType() {
			return GetRuleContexts<MessageTypeContext>();
		}
		public MessageTypeContext messageType(int i) {
			return GetRuleContext<MessageTypeContext>(i);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public RpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRpc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRpc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcContext rpc() {
		RpcContext _localctx = new RpcContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_rpc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(RPC);
			State = 210; rpcName();
			State = 211; Match(LPAREN);
			State = 213;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STREAM) {
				{
				State = 212; Match(STREAM);
				}
			}

			State = 215; messageType();
			State = 216; Match(RPAREN);
			State = 217; Match(RETURNS);
			State = 218; Match(LPAREN);
			State = 220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STREAM) {
				{
				State = 219; Match(STREAM);
				}
			}

			State = 222; messageType();
			State = 223; Match(RPAREN);
			State = 234;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRACE:
				{
				{
				State = 224; Match(LBRACE);
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPTION || _la==SEMI) {
					{
					State = 227;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case OPTION:
						{
						State = 225; option();
						}
						break;
					case SEMI:
						{
						State = 226; emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 231;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 232; Match(RBRACE);
				}
				}
				break;
			case SEMI:
				{
				State = 233; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		public RangesContext ranges() {
			return GetRuleContext<RangesContext>(0);
		}
		public FieldNamesContext fieldNames() {
			return GetRuleContext<FieldNamesContext>(0);
		}
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_reserved);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(RESERVED);
			State = 239;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IntLit:
				{
				State = 237; ranges();
				}
				break;
			case StrLit:
				{
				State = 238; fieldNames();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 241; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangesContext : ParserRuleContext {
		public RangeContext[] range() {
			return GetRuleContexts<RangeContext>();
		}
		public RangeContext range(int i) {
			return GetRuleContext<RangeContext>(i);
		}
		public RangesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranges; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRanges(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRanges(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangesContext ranges() {
		RangesContext _localctx = new RangesContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_ranges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; range();
			State = 248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 244; Match(COMMA);
				State = 245; range();
				}
				}
				State = 250;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] IntLit() { return GetTokens(Protobuf3Parser.IntLit); }
		public ITerminalNode IntLit(int i) {
			return GetToken(Protobuf3Parser.IntLit, i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_range);
		try {
			State = 255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; Match(IntLit);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252; Match(IntLit);
				State = 253; Match(TO);
				State = 254; Match(IntLit);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNamesContext : ParserRuleContext {
		public ITerminalNode[] StrLit() { return GetTokens(Protobuf3Parser.StrLit); }
		public ITerminalNode StrLit(int i) {
			return GetToken(Protobuf3Parser.StrLit, i);
		}
		public FieldNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldNames; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldNames(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldNames(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNamesContext fieldNames() {
		FieldNamesContext _localctx = new FieldNamesContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_fieldNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(StrLit);
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 258; Match(COMMA);
				State = 259; Match(StrLit);
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public MessageOrEnumTypeContext messageOrEnumType() {
			return GetRuleContext<MessageOrEnumTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_type);
		int _la;
		try {
			State = 267;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case BYTES:
			case DOUBLE:
			case FIXED32:
			case FIXED64:
			case FLOAT:
			case INT32:
			case INT64:
			case SFIXED32:
			case SFIXED64:
			case SINT32:
			case SINT64:
			case STRING:
			case UINT32:
			case UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTES) | (1L << DOUBLE) | (1L << FIXED32) | (1L << FIXED64) | (1L << FLOAT) | (1L << INT32) | (1L << INT64) | (1L << SFIXED32) | (1L << SFIXED64) | (1L << SINT32) | (1L << SINT64) | (1L << STRING) | (1L << UINT32) | (1L << UINT64))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case Ident:
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; messageOrEnumType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNumberContext : ParserRuleContext {
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public FieldNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNumberContext fieldNumber() {
		FieldNumberContext _localctx = new FieldNumberContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_fieldNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(IntLit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==REPEATED) {
				{
				State = 271; Match(REPEATED);
				}
			}

			State = 274; type();
			State = 275; fieldName();
			State = 276; Match(ASSIGN);
			State = 277; fieldNumber();
			State = 282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACK) {
				{
				State = 278; Match(LBRACK);
				State = 279; fieldOptions();
				State = 280; Match(RBRACK);
				}
			}

			State = 284; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		public FieldOptionContext[] fieldOption() {
			return GetRuleContexts<FieldOptionContext>();
		}
		public FieldOptionContext fieldOption(int i) {
			return GetRuleContext<FieldOptionContext>(i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_fieldOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; fieldOption();
			State = 291;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 287; Match(COMMA);
				State = 288; fieldOption();
				}
				}
				State = 293;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionContext : ParserRuleContext {
		public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FieldOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionContext fieldOption() {
		FieldOptionContext _localctx = new FieldOptionContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_fieldOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; optionName();
			State = 295; Match(ASSIGN);
			State = 296; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofContext : ParserRuleContext {
		public OneofNameContext oneofName() {
			return GetRuleContext<OneofNameContext>(0);
		}
		public OneofFieldContext[] oneofField() {
			return GetRuleContexts<OneofFieldContext>();
		}
		public OneofFieldContext oneofField(int i) {
			return GetRuleContext<OneofFieldContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public OneofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOneof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOneof(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofContext oneof() {
		OneofContext _localctx = new OneofContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_oneof);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(ONEOF);
			State = 299; oneofName();
			State = 300; Match(LBRACE);
			State = 305;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTES) | (1L << DOUBLE) | (1L << FIXED32) | (1L << FIXED64) | (1L << FLOAT) | (1L << INT32) | (1L << INT64) | (1L << SFIXED32) | (1L << SFIXED64) | (1L << SINT32) | (1L << SINT64) | (1L << STRING) | (1L << UINT32) | (1L << UINT64) | (1L << Ident) | (1L << SEMI) | (1L << DOT))) != 0)) {
				{
				State = 303;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BOOL:
				case BYTES:
				case DOUBLE:
				case FIXED32:
				case FIXED64:
				case FLOAT:
				case INT32:
				case INT64:
				case SFIXED32:
				case SFIXED64:
				case SINT32:
				case SINT64:
				case STRING:
				case UINT32:
				case UINT64:
				case Ident:
				case DOT:
					{
					State = 301; oneofField();
					}
					break;
				case SEMI:
					{
					State = 302; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 307;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 308; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofFieldContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public OneofFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOneofField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOneofField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofFieldContext oneofField() {
		OneofFieldContext _localctx = new OneofFieldContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_oneofField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; type();
			State = 311; fieldName();
			State = 312; Match(ASSIGN);
			State = 313; fieldNumber();
			State = 318;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACK) {
				{
				State = 314; Match(LBRACK);
				State = 315; fieldOptions();
				State = 316; Match(RBRACK);
				}
			}

			State = 320; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapFieldContext : ParserRuleContext {
		public KeyTypeContext keyType() {
			return GetRuleContext<KeyTypeContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MapNameContext mapName() {
			return GetRuleContext<MapNameContext>(0);
		}
		public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public MapFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMapField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMapField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapFieldContext mapField() {
		MapFieldContext _localctx = new MapFieldContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_mapField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(MAP);
			State = 323; Match(LCHEVR);
			State = 324; keyType();
			State = 325; Match(COMMA);
			State = 326; type();
			State = 327; Match(RCHEVR);
			State = 328; mapName();
			State = 329; Match(ASSIGN);
			State = 330; fieldNumber();
			State = 335;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACK) {
				{
				State = 331; Match(LBRACK);
				State = 332; fieldOptions();
				State = 333; Match(RBRACK);
				}
			}

			State = 337; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyTypeContext : ParserRuleContext {
		public KeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterKeyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitKeyType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyTypeContext keyType() {
		KeyTypeContext _localctx = new KeyTypeContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_keyType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << FIXED32) | (1L << FIXED64) | (1L << INT32) | (1L << INT64) | (1L << SFIXED32) | (1L << SFIXED64) | (1L << SINT32) | (1L << SINT64) | (1L << STRING) | (1L << UINT32) | (1L << UINT64))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdentContext : ParserRuleContext {
		public ITerminalNode[] Ident() { return GetTokens(Protobuf3Parser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(Protobuf3Parser.Ident, i);
		}
		public FullIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFullIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFullIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullIdentContext fullIdent() {
		FullIdentContext _localctx = new FullIdentContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_fullIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(Ident);
			State = 346;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 342; Match(DOT);
				State = 343; Match(Ident);
				}
				}
				State = 348;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public MessageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageNameContext messageName() {
		MessageNameContext _localctx = new MessageNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_messageName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEnumName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEnumName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageOrEnumNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public MessageOrEnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageOrEnumName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageOrEnumName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageOrEnumName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageOrEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageOrEnumNameContext messageOrEnumName() {
		MessageOrEnumNameContext _localctx = new MessageOrEnumNameContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_messageOrEnumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public OneofNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterOneofName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitOneofName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofNameContext oneofName() {
		OneofNameContext _localctx = new OneofNameContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_oneofName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public MapNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMapName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMapName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapNameContext mapName() {
		MapNameContext _localctx = new MapNameContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_mapName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public ServiceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterServiceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitServiceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceNameContext serviceName() {
		ServiceNameContext _localctx = new ServiceNameContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_serviceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public RpcNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpcName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterRpcName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitRpcName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpcName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcNameContext rpcName() {
		RpcNameContext _localctx = new RpcNameContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_rpcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeContext : ParserRuleContext {
		public MessageNameContext messageName() {
			return GetRuleContext<MessageNameContext>(0);
		}
		public ITerminalNode[] Ident() { return GetTokens(Protobuf3Parser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(Protobuf3Parser.Ident, i);
		}
		public MessageTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeContext messageType() {
		MessageTypeContext _localctx = new MessageTypeContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_messageType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 365; Match(DOT);
				}
			}

			State = 372;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 368; Match(Ident);
					State = 369; Match(DOT);
					}
					} 
				}
				State = 374;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			State = 375; messageName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageOrEnumTypeContext : ParserRuleContext {
		public MessageOrEnumNameContext messageOrEnumName() {
			return GetRuleContext<MessageOrEnumNameContext>(0);
		}
		public ITerminalNode[] Ident() { return GetTokens(Protobuf3Parser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(Protobuf3Parser.Ident, i);
		}
		public MessageOrEnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageOrEnumType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterMessageOrEnumType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitMessageOrEnumType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageOrEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageOrEnumTypeContext messageOrEnumType() {
		MessageOrEnumTypeContext _localctx = new MessageOrEnumTypeContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_messageOrEnumType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 377; Match(DOT);
				}
			}

			State = 384;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 380; Match(Ident);
					State = 381; Match(DOT);
					}
					} 
				}
				State = 386;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			State = 387; messageOrEnumName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public ITerminalNode FloatLit() { return GetToken(Protobuf3Parser.FloatLit, 0); }
		public ITerminalNode StrLit() { return GetToken(Protobuf3Parser.StrLit, 0); }
		public ITerminalNode BoolLit() { return GetToken(Protobuf3Parser.BoolLit, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtobuf3Listener typedListener = listener as IProtobuf3Listener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobuf3Visitor<TResult> typedVisitor = visitor as IProtobuf3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_constant);
		int _la;
		try {
			State = 401;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391; fullIdent();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MINUS || _la==PLUS) {
					{
					State = 392;
					_la = _input.La(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 395; Match(IntLit);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MINUS || _la==PLUS) {
					{
					State = 396;
					_la = _input.La(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 399; Match(FloatLit);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 400;
				_la = _input.La(1);
				if ( !(_la==BoolLit || _la==StrLit) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3;\x196\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2[\n\x2\f\x2\xE\x2^\v\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4i\n\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a}\n\a\x3\a\x3\a\a\a\x81\n\a\f\a\xE\a\x84"+
		"\v\a\x3\b\x3\b\x3\b\x5\b\x89\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x98\n\n\f\n\xE\n\x9B\v\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\a\f\xA7\n\f\f\f\xE\f\xAA\v\f\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x5\r\xB1\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xB8\n"+
		"\r\f\r\xE\r\xBB\v\r\x3\r\x3\r\x5\r\xBF\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xCD\n\xF\f\xF\xE\xF\xD0"+
		"\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xD8\n\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xDF\n\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\a\x10\xE6\n\x10\f\x10\xE\x10\xE9\v\x10\x3\x10\x3\x10\x5\x10"+
		"\xED\n\x10\x3\x11\x3\x11\x3\x11\x5\x11\xF2\n\x11\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x12\a\x12\xF9\n\x12\f\x12\xE\x12\xFC\v\x12\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\x102\n\x13\x3\x14\x3\x14\x3\x14\a\x14\x107\n\x14\f"+
		"\x14\xE\x14\x10A\v\x14\x3\x15\x3\x15\x5\x15\x10E\n\x15\x3\x16\x3\x16\x3"+
		"\x17\x5\x17\x113\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x5\x17\x11D\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\a\x18\x124"+
		"\n\x18\f\x18\xE\x18\x127\v\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\a\x1A\x132\n\x1A\f\x1A\xE\x1A\x135\v\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x141\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x152\n\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E\x15B\n\x1E\f\x1E\xE\x1E"+
		"\x15E\v\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3"+
		"%\x3%\x3&\x3&\x3\'\x5\'\x171\n\'\x3\'\x3\'\a\'\x175\n\'\f\'\xE\'\x178"+
		"\v\'\x3\'\x3\'\x3(\x5(\x17D\n(\x3(\x3(\a(\x181\n(\f(\xE(\x184\v(\x3(\x3"+
		"(\x3)\x3)\x3*\x3*\x5*\x18C\n*\x3*\x3*\x5*\x190\n*\x3*\x3*\x5*\x194\n*"+
		"\x3*\x2\x2\x2+\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46"+
		"\x2H\x2J\x2L\x2N\x2P\x2R\x2\x2\b\x3\x2\x12\x13\x4\x2\x14\x14$$\b\x2\x3"+
		"\x5\a\t\v\f\x1A\x1D\x1F\x1F\"#\b\x2\x3\x3\a\b\v\f\x1A\x1D\x1F\x1F\"#\x3"+
		"\x2\x36\x37\x3\x2()\x1A2\x2T\x3\x2\x2\x2\x4\x61\x3\x2\x2\x2\x6\x66\x3"+
		"\x2\x2\x2\bm\x3\x2\x2\x2\nq\x3\x2\x2\x2\f|\x3\x2\x2\x2\xE\x88\x3\x2\x2"+
		"\x2\x10\x8A\x3\x2\x2\x2\x12\x8E\x3\x2\x2\x2\x14\x9E\x3\x2\x2\x2\x16\xA2"+
		"\x3\x2\x2\x2\x18\xAD\x3\x2\x2\x2\x1A\xC2\x3\x2\x2\x2\x1C\xC6\x3\x2\x2"+
		"\x2\x1E\xD3\x3\x2\x2\x2 \xEE\x3\x2\x2\x2\"\xF5\x3\x2\x2\x2$\x101\x3\x2"+
		"\x2\x2&\x103\x3\x2\x2\x2(\x10D\x3\x2\x2\x2*\x10F\x3\x2\x2\x2,\x112\x3"+
		"\x2\x2\x2.\x120\x3\x2\x2\x2\x30\x128\x3\x2\x2\x2\x32\x12C\x3\x2\x2\x2"+
		"\x34\x138\x3\x2\x2\x2\x36\x144\x3\x2\x2\x2\x38\x155\x3\x2\x2\x2:\x157"+
		"\x3\x2\x2\x2<\x15F\x3\x2\x2\x2>\x161\x3\x2\x2\x2@\x163\x3\x2\x2\x2\x42"+
		"\x165\x3\x2\x2\x2\x44\x167\x3\x2\x2\x2\x46\x169\x3\x2\x2\x2H\x16B\x3\x2"+
		"\x2\x2J\x16D\x3\x2\x2\x2L\x170\x3\x2\x2\x2N\x17C\x3\x2\x2\x2P\x187\x3"+
		"\x2\x2\x2R\x193\x3\x2\x2\x2T\\\x5\x4\x3\x2U[\x5\x6\x4\x2V[\x5\b\x5\x2"+
		"W[\x5\n\x6\x2X[\x5\xE\b\x2Y[\x5P)\x2ZU\x3\x2\x2\x2ZV\x3\x2\x2\x2ZW\x3"+
		"\x2\x2\x2ZX\x3\x2\x2\x2ZY\x3\x2\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]"+
		"\x3\x2\x2\x2]_\x3\x2\x2\x2^\\\x3\x2\x2\x2_`\a\x2\x2\x3`\x3\x3\x2\x2\x2"+
		"\x61\x62\a \x2\x2\x62\x63\a\x38\x2\x2\x63\x64\t\x2\x2\x2\x64\x65\a\x33"+
		"\x2\x2\x65\x5\x3\x2\x2\x2\x66h\a\n\x2\x2gi\t\x3\x2\x2hg\x3\x2\x2\x2hi"+
		"\x3\x2\x2\x2ij\x3\x2\x2\x2jk\a)\x2\x2kl\a\x33\x2\x2l\a\x3\x2\x2\x2mn\a"+
		"\x11\x2\x2no\x5:\x1E\x2op\a\x33\x2\x2p\t\x3\x2\x2\x2qr\a\x10\x2\x2rs\x5"+
		"\f\a\x2st\a\x38\x2\x2tu\x5R*\x2uv\a\x33\x2\x2v\v\x3\x2\x2\x2w}\a%\x2\x2"+
		"xy\a+\x2\x2yz\x5:\x1E\x2z{\a,\x2\x2{}\x3\x2\x2\x2|w\x3\x2\x2\x2|x\x3\x2"+
		"\x2\x2}\x82\x3\x2\x2\x2~\x7F\a\x35\x2\x2\x7F\x81\a%\x2\x2\x80~\x3\x2\x2"+
		"\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\r"+
		"\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x89\x5\x10\t\x2\x86\x89\x5\x14\v"+
		"\x2\x87\x89\x5\x1C\xF\x2\x88\x85\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x88\x87"+
		"\x3\x2\x2\x2\x89\xF\x3\x2\x2\x2\x8A\x8B\a\xE\x2\x2\x8B\x8C\x5<\x1F\x2"+
		"\x8C\x8D\x5\x12\n\x2\x8D\x11\x3\x2\x2\x2\x8E\x99\a-\x2\x2\x8F\x98\x5,"+
		"\x17\x2\x90\x98\x5\x14\v\x2\x91\x98\x5\x10\t\x2\x92\x98\x5\n\x6\x2\x93"+
		"\x98\x5\x32\x1A\x2\x94\x98\x5\x36\x1C\x2\x95\x98\x5 \x11\x2\x96\x98\x5"+
		"P)\x2\x97\x8F\x3\x2\x2\x2\x97\x90\x3\x2\x2\x2\x97\x91\x3\x2\x2\x2\x97"+
		"\x92\x3\x2\x2\x2\x97\x93\x3\x2\x2\x2\x97\x94\x3\x2\x2\x2\x97\x95\x3\x2"+
		"\x2\x2\x97\x96\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99"+
		"\x9A\x3\x2\x2\x2\x9A\x9C\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9C\x9D\a.\x2"+
		"\x2\x9D\x13\x3\x2\x2\x2\x9E\x9F\a\x6\x2\x2\x9F\xA0\x5> \x2\xA0\xA1\x5"+
		"\x16\f\x2\xA1\x15\x3\x2\x2\x2\xA2\xA8\a-\x2\x2\xA3\xA7\x5\n\x6\x2\xA4"+
		"\xA7\x5\x18\r\x2\xA5\xA7\x5P)\x2\xA6\xA3\x3\x2\x2\x2\xA6\xA4\x3\x2\x2"+
		"\x2\xA6\xA5\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9"+
		"\x3\x2\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAC\a.\x2\x2"+
		"\xAC\x17\x3\x2\x2\x2\xAD\xAE\a%\x2\x2\xAE\xB0\a\x38\x2\x2\xAF\xB1\a\x36"+
		"\x2\x2\xB0\xAF\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2"+
		"\xBE\a&\x2\x2\xB3\xB4\a/\x2\x2\xB4\xB9\x5\x1A\xE\x2\xB5\xB6\a\x34\x2\x2"+
		"\xB6\xB8\x5\x1A\xE\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7"+
		"\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2"+
		"\x2\xBC\xBD\a\x30\x2\x2\xBD\xBF\x3\x2\x2\x2\xBE\xB3\x3\x2\x2\x2\xBE\xBF"+
		"\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\a\x33\x2\x2\xC1\x19\x3\x2\x2"+
		"\x2\xC2\xC3\x5\f\a\x2\xC3\xC4\a\x38\x2\x2\xC4\xC5\x5R*\x2\xC5\x1B\x3\x2"+
		"\x2\x2\xC6\xC7\a\x19\x2\x2\xC7\xC8\x5H%\x2\xC8\xCE\a-\x2\x2\xC9\xCD\x5"+
		"\n\x6\x2\xCA\xCD\x5\x1E\x10\x2\xCB\xCD\x5P)\x2\xCC\xC9\x3\x2\x2\x2\xCC"+
		"\xCA\x3\x2\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2"+
		"\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD1\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1"+
		"\xD2\a.\x2\x2\xD2\x1D\x3\x2\x2\x2\xD3\xD4\a\x18\x2\x2\xD4\xD5\x5J&\x2"+
		"\xD5\xD7\a+\x2\x2\xD6\xD8\a\x1E\x2\x2\xD7\xD6\x3\x2\x2\x2\xD7\xD8\x3\x2"+
		"\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDA\x5L\'\x2\xDA\xDB\a,\x2\x2\xDB\xDC\a"+
		"\x17\x2\x2\xDC\xDE\a+\x2\x2\xDD\xDF\a\x1E\x2\x2\xDE\xDD\x3\x2\x2\x2\xDE"+
		"\xDF\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x5L\'\x2\xE1\xEC\a,\x2\x2"+
		"\xE2\xE7\a-\x2\x2\xE3\xE6\x5\n\x6\x2\xE4\xE6\x5P)\x2\xE5\xE3\x3\x2\x2"+
		"\x2\xE5\xE4\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8"+
		"\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xED\a.\x2\x2"+
		"\xEB\xED\a\x33\x2\x2\xEC\xE2\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED\x1F\x3"+
		"\x2\x2\x2\xEE\xF1\a\x16\x2\x2\xEF\xF2\x5\"\x12\x2\xF0\xF2\x5&\x14\x2\xF1"+
		"\xEF\x3\x2\x2\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\a\x33"+
		"\x2\x2\xF4!\x3\x2\x2\x2\xF5\xFA\x5$\x13\x2\xF6\xF7\a\x34\x2\x2\xF7\xF9"+
		"\x5$\x13\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFC\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2"+
		"\xFA\xFB\x3\x2\x2\x2\xFB#\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFD\x102\a&"+
		"\x2\x2\xFE\xFF\a&\x2\x2\xFF\x100\a!\x2\x2\x100\x102\a&\x2\x2\x101\xFD"+
		"\x3\x2\x2\x2\x101\xFE\x3\x2\x2\x2\x102%\x3\x2\x2\x2\x103\x108\a)\x2\x2"+
		"\x104\x105\a\x34\x2\x2\x105\x107\a)\x2\x2\x106\x104\x3\x2\x2\x2\x107\x10A"+
		"\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\'\x3\x2"+
		"\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x10E\t\x4\x2\x2\x10C\x10E\x5N(\x2\x10D"+
		"\x10B\x3\x2\x2\x2\x10D\x10C\x3\x2\x2\x2\x10E)\x3\x2\x2\x2\x10F\x110\a"+
		"&\x2\x2\x110+\x3\x2\x2\x2\x111\x113\a\x15\x2\x2\x112\x111\x3\x2\x2\x2"+
		"\x112\x113\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x115\x5(\x15\x2\x115"+
		"\x116\x5\x42\"\x2\x116\x117\a\x38\x2\x2\x117\x11C\x5*\x16\x2\x118\x119"+
		"\a/\x2\x2\x119\x11A\x5.\x18\x2\x11A\x11B\a\x30\x2\x2\x11B\x11D\x3\x2\x2"+
		"\x2\x11C\x118\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2"+
		"\x11E\x11F\a\x33\x2\x2\x11F-\x3\x2\x2\x2\x120\x125\x5\x30\x19\x2\x121"+
		"\x122\a\x34\x2\x2\x122\x124\x5\x30\x19\x2\x123\x121\x3\x2\x2\x2\x124\x127"+
		"\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126/\x3\x2\x2"+
		"\x2\x127\x125\x3\x2\x2\x2\x128\x129\x5\f\a\x2\x129\x12A\a\x38\x2\x2\x12A"+
		"\x12B\x5R*\x2\x12B\x31\x3\x2\x2\x2\x12C\x12D\a\xF\x2\x2\x12D\x12E\x5\x44"+
		"#\x2\x12E\x133\a-\x2\x2\x12F\x132\x5\x34\x1B\x2\x130\x132\x5P)\x2\x131"+
		"\x12F\x3\x2\x2\x2\x131\x130\x3\x2\x2\x2\x132\x135\x3\x2\x2\x2\x133\x131"+
		"\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x136\x3\x2\x2\x2\x135\x133\x3"+
		"\x2\x2\x2\x136\x137\a.\x2\x2\x137\x33\x3\x2\x2\x2\x138\x139\x5(\x15\x2"+
		"\x139\x13A\x5\x42\"\x2\x13A\x13B\a\x38\x2\x2\x13B\x140\x5*\x16\x2\x13C"+
		"\x13D\a/\x2\x2\x13D\x13E\x5.\x18\x2\x13E\x13F\a\x30\x2\x2\x13F\x141\x3"+
		"\x2\x2\x2\x140\x13C\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x142\x3\x2"+
		"\x2\x2\x142\x143\a\x33\x2\x2\x143\x35\x3\x2\x2\x2\x144\x145\a\r\x2\x2"+
		"\x145\x146\a\x31\x2\x2\x146\x147\x5\x38\x1D\x2\x147\x148\a\x34\x2\x2\x148"+
		"\x149\x5(\x15\x2\x149\x14A\a\x32\x2\x2\x14A\x14B\x5\x46$\x2\x14B\x14C"+
		"\a\x38\x2\x2\x14C\x151\x5*\x16\x2\x14D\x14E\a/\x2\x2\x14E\x14F\x5.\x18"+
		"\x2\x14F\x150\a\x30\x2\x2\x150\x152\x3\x2\x2\x2\x151\x14D\x3\x2\x2\x2"+
		"\x151\x152\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\a\x33\x2\x2\x154"+
		"\x37\x3\x2\x2\x2\x155\x156\t\x5\x2\x2\x156\x39\x3\x2\x2\x2\x157\x15C\a"+
		"%\x2\x2\x158\x159\a\x35\x2\x2\x159\x15B\a%\x2\x2\x15A\x158\x3\x2\x2\x2"+
		"\x15B\x15E\x3\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D"+
		";\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15F\x160\a%\x2\x2\x160=\x3\x2\x2"+
		"\x2\x161\x162\a%\x2\x2\x162?\x3\x2\x2\x2\x163\x164\a%\x2\x2\x164\x41\x3"+
		"\x2\x2\x2\x165\x166\a%\x2\x2\x166\x43\x3\x2\x2\x2\x167\x168\a%\x2\x2\x168"+
		"\x45\x3\x2\x2\x2\x169\x16A\a%\x2\x2\x16AG\x3\x2\x2\x2\x16B\x16C\a%\x2"+
		"\x2\x16CI\x3\x2\x2\x2\x16D\x16E\a%\x2\x2\x16EK\x3\x2\x2\x2\x16F\x171\a"+
		"\x35\x2\x2\x170\x16F\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x176\x3\x2"+
		"\x2\x2\x172\x173\a%\x2\x2\x173\x175\a\x35\x2\x2\x174\x172\x3\x2\x2\x2"+
		"\x175\x178\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177"+
		"\x179\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x179\x17A\x5<\x1F\x2\x17AM\x3"+
		"\x2\x2\x2\x17B\x17D\a\x35\x2\x2\x17C\x17B\x3\x2\x2\x2\x17C\x17D\x3\x2"+
		"\x2\x2\x17D\x182\x3\x2\x2\x2\x17E\x17F\a%\x2\x2\x17F\x181\a\x35\x2\x2"+
		"\x180\x17E\x3\x2\x2\x2\x181\x184\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x182"+
		"\x183\x3\x2\x2\x2\x183\x185\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x185\x186"+
		"\x5@!\x2\x186O\x3\x2\x2\x2\x187\x188\a\x33\x2\x2\x188Q\x3\x2\x2\x2\x189"+
		"\x194\x5:\x1E\x2\x18A\x18C\t\x6\x2\x2\x18B\x18A\x3\x2\x2\x2\x18B\x18C"+
		"\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x194\a&\x2\x2\x18E\x190\t\x6\x2"+
		"\x2\x18F\x18E\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2"+
		"\x191\x194\a\'\x2\x2\x192\x194\t\a\x2\x2\x193\x189\x3\x2\x2\x2\x193\x18B"+
		"\x3\x2\x2\x2\x193\x18F\x3\x2\x2\x2\x193\x192\x3\x2\x2\x2\x194S\x3\x2\x2"+
		"\x2*Z\\h|\x82\x88\x97\x99\xA6\xA8\xB0\xB9\xBE\xCC\xCE\xD7\xDE\xE5\xE7"+
		"\xEC\xF1\xFA\x101\x108\x10D\x112\x11C\x125\x131\x133\x140\x151\x15C\x170"+
		"\x176\x17C\x182\x18B\x18F\x193";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrDLL
